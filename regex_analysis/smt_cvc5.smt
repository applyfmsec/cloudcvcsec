(set-logic ALL)
(set-option :produce-models true)
(declare-fun x () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "p") (str.to_re "2"))
                               (str.to_re "_"))
                     (str.to_re "n"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "d")) (str.to_re "i"))
                     (str.to_re "h"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "w")) (str.to_re "6"))
                     (str.to_re "8"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "u")) (str.to_re "s"))
                     (str.to_re "x"))))
(let ((a!5 (re.union (re.union (re.union a!4 (str.to_re "0")) (str.to_re "r"))
                     (str.to_re "z"))))
(let ((a!6 (re.union (re.union (re.union a!5 (str.to_re "y")) (str.to_re "v"))
                     (str.to_re "4"))))
(let ((a!7 (re.union (re.union (re.union a!6 (str.to_re "l")) (str.to_re "/"))
                     (str.to_re "e"))))
(let ((a!8 (re.union (re.union (re.union a!7 (str.to_re "1")) (str.to_re "7"))
                     (str.to_re "o"))))
(let ((a!9 (re.union (re.union (re.union a!8 (str.to_re "5")) (str.to_re "m"))
                     (str.to_re "k"))))
(let ((a!10 (re.union (re.union (re.union a!9 (str.to_re "9")) (str.to_re "f"))
                      (str.to_re "j"))))
(let ((a!11 (re.union (re.union (re.union a!10 (str.to_re "b")) (str.to_re "3"))
                      (str.to_re "g"))))
(let ((a!12 (re.union (re.union (re.union a!11 (str.to_re "t")) (str.to_re "a"))
                      (str.to_re "c"))))
(let ((a!13 (re.++ (str.to_re "/sys") (re.* (re.union a!12 (str.to_re "q")))))
      (a!14 (re.++ (str.to_re "/") (re.* (re.union a!12 (str.to_re "q"))))))
  (not (=> (str.in_re x a!13) (str.in_re x a!14)))))))))))))))))

(check-sat)
(get-model)
